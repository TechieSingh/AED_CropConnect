/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Farmer.WorkArea;

import Common.Item;
import Contract.Contract;
import Contract.ContractDirectory;
import Distributor.BuyOffer;
import Distributor.BuyOfferDirectory;
import Distributor.Distributor;
import Distributor.DistributorDirectory;
import FMCG.SeasonNew;
import Farmer.FarmerProfile;
import Farmer.Transaction;
import Farmer.TransactionDirectory;
import Market.Market;
import Market.MarketDirectory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sagar
 */
public class CropSellingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CropSellingJPanel
     */
    JPanel farmerProcessStack;
    FarmerProfile farmerprofile;
    MarketDirectory marketDirectory;
    ContractDirectory contractDirectory;
    DistributorDirectory distributorDirectory;
    TransactionDirectory transactionDirectory;
    ArrayList<Contract> farmerContracts;
    Contract selectedContract;
    
    public CropSellingJPanel(JPanel jp, FarmerProfile farmerprofile, MarketDirectory marketDirectory, ContractDirectory contractDirectory, DistributorDirectory distributorDirectory, TransactionDirectory transactionDirectory) {
        initComponents();
        this.farmerProcessStack = jp;
        this.farmerprofile = farmerprofile;
        this.marketDirectory = marketDirectory;
        this.contractDirectory = contractDirectory;
        this.distributorDirectory = distributorDirectory;
        this.transactionDirectory = transactionDirectory;
        farmerContracts = this.farmerprofile.getFarmerContracts();
        populateComboMarketNames();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBuyOffersList = new javax.swing.JTable();
        lblSellCrops = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHoldings = new javax.swing.JTable();
        lblHoldings = new javax.swing.JLabel();
        lblListDistributors = new javax.swing.JLabel();
        btnSell = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        cmbMarketName = new javax.swing.JComboBox<>();
        btnViewBuyOffers = new javax.swing.JButton();
        btnViewContracts = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));

        tblBuyOffersList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Distributor Name", "Crop Name", "Grade", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBuyOffersList);

        lblSellCrops.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSellCrops.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSellCrops.setText("Sell Crops");

        tblHoldings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Crop Name", "Grade", "Quantity Unsold", "Quantity Sold", "Market Name", "Crop QA Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblHoldings);

        lblHoldings.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblHoldings.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHoldings.setText("Select My Contract's Market:");

        lblListDistributors.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblListDistributors.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblListDistributors.setText("List of Distributors BuyOffers");

        btnSell.setBackground(new java.awt.Color(0, 102, 153));
        btnSell.setForeground(new java.awt.Color(255, 255, 255));
        btnSell.setText("Sell");
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(0, 102, 153));
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnViewBuyOffers.setBackground(new java.awt.Color(0, 102, 153));
        btnViewBuyOffers.setForeground(new java.awt.Color(255, 255, 255));
        btnViewBuyOffers.setText("View Buy Offers");
        btnViewBuyOffers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewBuyOffersActionPerformed(evt);
            }
        });

        btnViewContracts.setBackground(new java.awt.Color(0, 102, 153));
        btnViewContracts.setForeground(new java.awt.Color(255, 255, 255));
        btnViewContracts.setText("View Contracts");
        btnViewContracts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewContractsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnViewBuyOffers)
                                    .addGap(200, 200, 200)
                                    .addComponent(lblListDistributors, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnBack)
                                    .addGap(314, 314, 314)
                                    .addComponent(lblSellCrops, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(169, 169, 169)
                                    .addComponent(lblHoldings, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(cmbMarketName, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnViewContracts)))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(388, 388, 388)
                        .addComponent(btnSell)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 442, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSellCrops)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHoldings, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMarketName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewContracts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnViewBuyOffers))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lblListDistributors)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSell)
                .addContainerGap(11, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        farmerProcessStack.remove(this);
        ((java.awt.CardLayout) farmerProcessStack.getLayout()).previous(farmerProcessStack);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewContractsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewContractsActionPerformed
        // TODO add your handling code here:
              
        if (cmbMarketName.getSelectedItem() != null) {
            populateContracts(farmerContracts,cmbMarketName.getSelectedItem().toString()); 
//            for(Contract contractTemp: farmerContracts){
//                if(contractTemp.getMarket().getMarketName().equals(cmbMarketName.getSelectedItem().toString())){
//                        populateContractTable(contractTemp, contractTemp.getMarket());
//                }
//            }
        }else{
             JOptionPane.showMessageDialog(null,"Please select a Market!","Warning",JOptionPane.WARNING_MESSAGE); 
        }
    }//GEN-LAST:event_btnViewContractsActionPerformed

    private void btnViewBuyOffersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewBuyOffersActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblHoldings.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a Crop from the table first!","Warning",JOptionPane.WARNING_MESSAGE);    
        }else{
            DefaultTableModel model = (DefaultTableModel) tblHoldings.getModel();
            selectedContract = (Contract) model.getValueAt(selectedRow, 0);
            Item selectedItem = selectedContract.getSelectedItem();
            
            populateBuyOffersTable(selectedContract);
        }
    }//GEN-LAST:event_btnViewBuyOffersActionPerformed

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        // TODO add your handling code here:
        int selectRow = tblBuyOffersList.getSelectedRow();
        if(selectRow<0){
            JOptionPane.showMessageDialog(null,"Please select a BuyOffer from the table first!","Warning",JOptionPane.WARNING_MESSAGE);    
        }else{
            if (selectedContract.getFilledqty()< selectedContract.getSelectedItem().getQuantity()){
            DefaultTableModel model = (DefaultTableModel) tblBuyOffersList.getModel();
            BuyOffer selectedBuyOffer = (BuyOffer) model.getValueAt(selectRow, 0);
            Distributor selectedDistributor = selectedBuyOffer.getDistributorAdmin().getDistributor();
            Item item = selectedBuyOffer.getItem();
            if(selectedContract.getSelectedItem().getQuantity() > selectedBuyOffer.getItem().getQuantity()){
                //selectedContract.getSelectedItem().setQuantity(selectedContract.getSelectedItem().getQuantity() - selectedBuyOffer.getItem().getQuantity());
                selectedContract.addFilledqty(selectedBuyOffer.getItem().getQuantity());
                selectedBuyOffer.getItem().setQuantity(0);
   
            }else if (selectedContract.getSelectedItem().getQuantity() <= selectedBuyOffer.getItem().getQuantity()){
                selectedContract.addFilledqty(selectedContract.getSelectedItem().getQuantity());
                selectedBuyOffer.getItem().setQuantity(selectedBuyOffer.getItem().getQuantity() - selectedContract.getSelectedItem().getQuantity());
                
            }
            Transaction newTransaction = transactionDirectory.addNewTransaction(farmerprofile, selectedDistributor, item, selectedBuyOffer, selectedContract);
            
            //populateContractTable(selectedContract);
            populateContracts(farmerContracts,selectedContract.getMarket().getMarketName());
            populateBuyOffersTable(selectedContract);
        }else {
                JOptionPane.showMessageDialog(null,"Cannot sell more than Committed!","Warning",JOptionPane.WARNING_MESSAGE);
            }
       }
    }//GEN-LAST:event_btnSellActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSell;
    private javax.swing.JButton btnViewBuyOffers;
    private javax.swing.JButton btnViewContracts;
    private javax.swing.JComboBox<String> cmbMarketName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblHoldings;
    private javax.swing.JLabel lblListDistributors;
    private javax.swing.JLabel lblSellCrops;
    private javax.swing.JTable tblBuyOffersList;
    private javax.swing.JTable tblHoldings;
    // End of variables declaration//GEN-END:variables

    private void populateComboMarketNames() {   
        cmbMarketName.removeAllItems();  
        Set<Market> contractMarkets = getContractMarkets(farmerContracts);
        for (Market market : contractMarkets) {
            if(market.getSeason().equals(SeasonNew.SELLING_PHASE)){
                cmbMarketName.addItem(market.getMarketName());
            }
        }
       
    }

    private void populateBuyOffersTable(Contract selectedContract) {
        Market market = selectedContract.getMarket();
        BuyOfferDirectory buyOfferDirectory = market.getBuyOfferDirectory();
        if(!buyOfferDirectory.getBuyOffers().isEmpty()){
            int rc = tblBuyOffersList.getRowCount();
            int i;
            for (i = rc - 1; i >= 0; i--) {
                ((DefaultTableModel) tblBuyOffersList.getModel()).removeRow(i);
            }
            for (BuyOffer buyoffer: buyOfferDirectory.getBuyOffers()){
                if(buyoffer.getItem().getCrop().getCropName().equals(selectedContract.getSelectedItem().getCrop().getCropName())){
                    if(buyoffer.getItem().getQuantity() > 0){
                        Object[] row = new Object[5];
                        row[0] = buyoffer;
                        row[1] = buyoffer.getItem().getCrop().getCropName();
                        row[2] = buyoffer.getItem().getCrop().getGrade();
                        row[3] = buyoffer.getItem().getQuantity();
                        row[4] = buyoffer.getUnitPrice();
                        ((DefaultTableModel) tblBuyOffersList.getModel()).addRow(row); 
                    }
                } 
            }
        }
    }
    
    private void populateContractTable(Contract contractTemp, Market marketTemp){
        int rc = tblHoldings.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) tblHoldings.getModel()).removeRow(i);
        }
//        Market marketTemp = contractTemp.getMarket();
//        ArrayList<Contract> tempcontracts = marketTemp.getMarketContracts();
//        for (Contract c: tempcontracts){
//            if(c.getSelectedItem().getQuantity() > 0){
                Object[] row = new Object[6];
                row[0] = contractTemp;
                row[1] = contractTemp.getSelectedItem().getCrop().getGrade();
                row[2] = contractTemp.getSelectedItem().getQuantity();
                row[3] = contractTemp.getFilledqty();
                row[4] = contractTemp.getMarket().getMarketName();
                row[5] = contractTemp.isQualityAssuranceApproval();
                ((DefaultTableModel) tblHoldings.getModel()).addRow(row); 
                    
        
    }
    
    public Set<Market> getContractMarkets(ArrayList<Contract> farmerContracts) {
        Set<Market> markets = new HashSet<>();
        for (Contract contract : farmerContracts) {
            markets.add(contract.getMarket());
        }
        return markets;
        }

    private void populateContracts(ArrayList<Contract> farmerContracts, String marketname) {
        int rc = tblHoldings.getRowCount();
            int i;
            for (i = rc - 1; i >= 0; i--) {
                ((DefaultTableModel) tblHoldings.getModel()).removeRow(i);
            }
            for(Contract c: farmerContracts){
                if(c.getMarket().getMarketName().equals(marketname) && c.isQualityAssuranceApproval()){
                    Object[] row = new Object[6];
                    row[0] = c;
                    row[1] = c.getSelectedItem().getCrop().getGrade();
                    row[2] = c.getSelectedItem().getQuantity();
                    row[3] = c.getFilledqty();
                    row[4] = c.getMarket().getMarketName();
                    row[5] = c.isQualityAssuranceApproval();
                    ((DefaultTableModel) tblHoldings.getModel()).addRow(row); 
                }  
            }
        }
    
}
