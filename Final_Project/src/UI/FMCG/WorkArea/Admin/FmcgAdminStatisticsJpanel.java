/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.FMCG.WorkArea.Admin;

import Distributor.FmcgTransaction;
import FMCG.FmcgAdmin;
import FMCG.ProcurementOffer;
import FMCG.ProcurementOfficer;
import FMCG.SeasonNew;
import Market.Market;
import Market.MarketDirectory;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author amitanveri
 */
public class FmcgAdminStatisticsJpanel extends javax.swing.JPanel {

    FmcgAdmin fmcgAdmin;
    JPanel processControlStack;
    MarketDirectory marketDirectory;

    public FmcgAdminStatisticsJpanel(JPanel processControlStack, FmcgAdmin fmcgAdmin, MarketDirectory marketDirectory) {
        initComponents();
        this.fmcgAdmin = fmcgAdmin;
        this.processControlStack = processControlStack;
        this.marketDirectory = marketDirectory;
        populateCmbMarkets();
        populateCmbMarkets1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbMarkets = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCropRequriementSupply = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbMarkets1 = new javax.swing.JComboBox<>();
        scrollPanel = new javax.swing.JScrollPane();
        tblConverstionRate = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        txtTotalOfferConversionRate = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("FMCG STATISTICS");

        jLabel2.setText("Requirement Vs Supply After Market End:");

        cmbMarkets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMarkets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMarketsActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Market :");

        tblCropRequriementSupply.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Crop Name", "Total Requirement Posted", "Total Supplied"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCropRequriementSupply);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel4.setText("Procurement Conversion Rate :");

        jLabel5.setText("Select Market :");

        cmbMarkets1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMarkets1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMarkets1ActionPerformed(evt);
            }
        });

        tblConverstionRate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Procurement Officer", "Total Offers", "Successful Offers"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollPanel.setViewportView(tblConverstionRate);

        jLabel6.setText("Total Offer Conversion Rate:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMarkets1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotalOfferConversionRate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(224, 224, 224)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbMarkets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollPanel))
                .addContainerGap(382, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbMarkets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbMarkets1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtTotalOfferConversionRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        processControlStack.remove(this);
        ((java.awt.CardLayout) processControlStack.getLayout()).previous(processControlStack);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbMarketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMarketsActionPerformed
        // Get the selected market name from the combo box.
        String selectedMarketName = (String) cmbMarkets.getSelectedItem();
        if (selectedMarketName == null) {
            System.out.println("No market selected.");
            return;
        }

        // Find the market by name from the market directory.
        Market selectedMarket = marketDirectory.getMarkets().stream()
                .filter(m -> m.getMarketName().equals(selectedMarketName))
                .findFirst()
                .orElse(null);

        if (selectedMarket == null) {
            System.out.println("Selected market not found.");
            return;
        }

        // Populate the table with the requirements and supplies for the selected market.
        populateTableWithMarketData(selectedMarket);
    }//GEN-LAST:event_cmbMarketsActionPerformed

    private void cmbMarkets1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMarkets1ActionPerformed
        String selectedMarketName = (String) cmbMarkets1.getSelectedItem();
        if (selectedMarketName == null) {
            System.out.println("No market selected.");
            return;
        }

        // Find the market by name
        Market selectedMarket = marketDirectory.getMarkets().stream()
                .filter(m -> m.getMarketName().equals(selectedMarketName))
                .findFirst()
                .orElse(null);

        if (selectedMarket == null) {
            System.out.println("Selected market not found.");
            return;
        }

        populateProcurementSuccessTable(selectedMarket);
    }//GEN-LAST:event_cmbMarkets1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> cmbMarkets;
    private javax.swing.JComboBox<String> cmbMarkets1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTable tblConverstionRate;
    private javax.swing.JTable tblCropRequriementSupply;
    private javax.swing.JTextField txtTotalOfferConversionRate;
    // End of variables declaration//GEN-END:variables

    private void populateCmbMarkets() {
        cmbMarkets.removeAllItems(); // Clears the combo box to ensure it's empty before adding new entries.

        // Assuming you have a way to get all markets, e.g., from an instance of MarketDirectory.
        List<Market> allMarkets = marketDirectory.getMarkets(); // Ensure you have a getter for the markets in the MarketDirectory.

        for (Market market : allMarkets) {
            // Assuming each market has a method to get its season which can compare with SeasonNew.END.
            if (market.getSeason() == SeasonNew.END) {
                cmbMarkets.addItem(market.getMarketName()); // Add the market to the combo box.
            }
        }

        // Optionally set a default selection if there are entries.
        if (cmbMarkets.getItemCount() > 0) {
            cmbMarkets.setSelectedIndex(0);
        } else {
            System.out.println("FMCGAdminStaticsJpanel::No ended markets are available to display.");
        }
    }

    private void populateTableWithMarketData(Market market) {
        DefaultTableModel model = (DefaultTableModel) tblCropRequriementSupply.getModel();
        model.setRowCount(0); // Clear existing rows

        HashMap<String, Double> requirementsMap = new HashMap<>();
        HashMap<String, Double> supplyMap = new HashMap<>();

        // Aggregate requirements for each crop in the selected market
        market.getMasterRequirment().getRequirements().forEach(req -> {
            String cropName = req.getItem().getCrop().getCropName();
            double quantity = req.getItem().getQuantity();
            requirementsMap.put(cropName, requirementsMap.getOrDefault(cropName, 0.0) + quantity);
        });

        // Aggregate supplies for each crop in the selected market
        for (FmcgTransaction transaction : fmcgAdmin.getRequirementOffice().getFmcg().getFmcgTransactions()) {
            if (transaction.getProcurementOffer().getRequirement().getMarket() == market) {
                String cropName = transaction.getItem().getCrop().getCropName();
                double quantity = transaction.getItem().getQuantity();
                supplyMap.put(cropName, supplyMap.getOrDefault(cropName, 0.0) + quantity);
            }
        }

        // Fill the table with the data
        requirementsMap.forEach((cropName, reqQuantity) -> {
            Double supQuantity = supplyMap.getOrDefault(cropName, 0.0);
            model.addRow(new Object[]{cropName, reqQuantity, supQuantity});
        });
    }

    private void populateCmbMarkets1() {
        cmbMarkets1.removeAllItems(); // Clears the combo box to ensure it's empty before adding new entries.

        // Assuming you have a way to get all markets, e.g., from an instance of MarketDirectory.
        List<Market> allMarkets = marketDirectory.getMarkets(); // Ensure you have a getter for the markets in the MarketDirectory.

        for (Market market : allMarkets) {
            cmbMarkets1.addItem(market.getMarketName()); // Add the market to the combo box
        }

        // Optionally set a default selection if there are entries.
        if (cmbMarkets1.getItemCount() > 0) {
            cmbMarkets1.setSelectedIndex(0);
        } else {
            System.out.println("FMCGAdminStaticsJpanel::No markets are available to display.");
        }
    }

    private void populateProcurementSuccessTable(Market market) {
        Map<ProcurementOfficer, Integer> totalOffers = new HashMap<>();
        Map<ProcurementOfficer, Integer> successfulOffers = new HashMap<>();

        int totalOfferCount = 0;
        int totalSuccessfulCount = 0;

        // Count total offers and successful offers for each officer in the selected market
        for (ProcurementOffer offer : fmcgAdmin.getProcurementOffice().getProcurementOffers()) {
            if (offer.getRequirement().getMarket().equals(market)) {
                totalOffers.merge(offer.getProcurementOfficer(), 1, Integer::sum);
                totalOfferCount++;  // Increment the total count of offers
                if (fmcgAdmin.getRequirementOffice().getFmcg().getFmcgTransactions().stream()
                        .anyMatch(tr -> tr.getProcurementOffer() == offer)) {
                    successfulOffers.merge(offer.getProcurementOfficer(), 1, Integer::sum);
                    totalSuccessfulCount++;  // Increment the total count of successful offers
                }
            }
        }

        DefaultTableModel model = (DefaultTableModel) tblConverstionRate.getModel();
        model.setRowCount(0); // Clear the table

        // Fill the table with the data
        totalOffers.forEach((officer, total) -> {
            Integer success = successfulOffers.getOrDefault(officer, 0);
            model.addRow(new Object[]{officer.getPerson().getFullName(), total, success});
        });

        // Calculate the total conversion rate and update the text field
        double totalConversionRate = (totalOfferCount > 0) ? (double) totalSuccessfulCount / totalOfferCount * 100.0 : 0.0;
        txtTotalOfferConversionRate.setText(String.format("%.2f%%", totalConversionRate));
    }

}
