/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Distributor.WorkArea;

import CropFolder.CropDirectory;
import Distributor.Inventory;
import Distributor.InventoryOfficer;
import Distributor.Storage;
import Market.Market;
import Market.MarketDirectory;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import CropFolder.Crop;
import javax.swing.JOptionPane;

/**
 *
 * @author prart
 */
public class InventoryJPanel extends javax.swing.JPanel {
    
    JPanel processControlStack;
    InventoryOfficer inventoryOfficer;
    MarketDirectory marketDirectory;
    CropDirectory cropDirectory;
    /**
     * Creates new form InventoryJPanel
     */
    public InventoryJPanel(JPanel processControlStack, InventoryOfficer inventoryOfficer, MarketDirectory marketDirectory, CropDirectory cropDirectory) {
        initComponents();
        this.processControlStack = processControlStack;
        this.inventoryOfficer = inventoryOfficer;
        this.marketDirectory= marketDirectory;
        this.cropDirectory = cropDirectory;
        populatecmb();
        populatecrops();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbMarkets = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cmbCrops = new javax.swing.JComboBox<>();
        txtQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnStorage = new javax.swing.JButton();

        setBackground(new java.awt.Color(224, 245, 166));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Add Storage");

        cmbMarkets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMarkets.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMarketsItemStateChanged(evt);
            }
        });

        jLabel2.setText("Markets:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Crop", "Grade", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        cmbCrops.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        jLabel3.setText("Quantity:");

        jLabel4.setText("Crop:");

        btnStorage.setText("Create Storage");
        btnStorage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStorageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCrops, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbMarkets, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(254, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStorage)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMarkets, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCrops, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(153, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnStorageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStorageActionPerformed
        // TODO add your handling code here:
        String selectedMarket = String.valueOf(cmbMarkets.getSelectedItem());
        String[] crops = String.valueOf(cmbCrops.getSelectedItem()).split(" ");
        Crop crop = cropDirectory.searchCrop(crops[0], crops[1]);
        if(cmbMarkets.getSelectedIndex()>-1){
            double Quantity = Double.parseDouble(txtQuantity.getText());
            for(Inventory inventory :inventoryOfficer.getInventoryOffice().getInventory() ){
                for(Storage storage:inventory.getStorages()){
                    if(storage.getCrop().equals(crop)){
                        storage.addTotalCapacity(Quantity);
                        populatetable();
                        return;
                    }
                }
            }
            Inventory inventory= inventoryOfficer.getInventoryOffice().addInventory(selectedMarket, crop, Quantity);
            populatetable();
            txtQuantity.setText("");
        }   
    }//GEN-LAST:event_btnStorageActionPerformed

    private void cmbMarketsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMarketsItemStateChanged
        // TODO add your handling code here:
        populatetable();
        populatecrops();
    }//GEN-LAST:event_cmbMarketsItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStorage;
    private javax.swing.JComboBox<String> cmbCrops;
    private javax.swing.JComboBox<String> cmbMarkets;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    private void populatecmb() {
        cmbMarkets.removeAllItems();
        for(Market market : marketDirectory.getMarkets()){
            cmbMarkets.addItem(market.getMarketName());
        }
        populatetable();
    }

    private void populatetable() {
        String selectedMarket = String.valueOf(cmbMarkets.getSelectedItem());
        if(cmbMarkets.getSelectedIndex()>-1){
            DefaultTableModel model =(DefaultTableModel)jTable1.getModel();
            model.setRowCount(0);
            for( Inventory inventory : inventoryOfficer.getInventoryOffice().getInventory() ){
                if(inventory.getMarketName().equals(selectedMarket)){
                    for(Storage storage: inventory.getStorages()){
                        Object[] row =new Object[3];
                        row[0]=storage.getCrop().getCropName();
                        row[1]=storage.getCrop().getGrade();
                        row[2]=storage.getTotalCapacity();
                        model.addRow(row);
                    }
                }
            }
        }
    }

    private void populatecrops() {
        String selectedMarket = String.valueOf(cmbMarkets.getSelectedItem());
        if(cmbMarkets.getSelectedIndex()>-1){
            cmbCrops.removeAllItems();  
            Market market =marketDirectory.searchMarkets(selectedMarket);
            for(Crop crop : market.getMasterRequirment().getCropList()){
                cmbCrops.addItem(crop.getCropName()+" "+crop.getGrade());
            }
        }
    }
}
