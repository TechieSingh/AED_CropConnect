/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.SystemAdmin.WorkArea;

import Business.EcoSystem;
import Business.SystemAdmin;
import FMCG.EmployeeDirectory;
import FMCG.FMCG;
import FMCG.FMCGDirectory;
import FMCG.FmcgAdmin;
import FMCG.ProcurementOfficer;
import FMCG.RequirementOfficer;
import Farmer.FarmerProfile;
import Distributor.Distributor;
import Distributor.DistributorAdmin;
import Distributor.InventoryOfficer;
import Distributor.TransportOfficer;
import PersonUserProfile.Person;
import PersonUserProfile.Profile;
import PersonUserProfile.UserAccount;
import PersonUserProfile.UserAccountDirectory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import utils.EmailSender;

/**
 *
 * @author kal bugrara
 */
public class ManageUserAccountsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel sysadminProcessStack;
    EcoSystem ecosystem;
    SystemAdmin sysAdmin;
    UserAccountDirectory useraccountdirectory;
    EmployeeDirectory employeedirectory;
    UserAccount selectedUserAccount;
    FMCGDirectory fmcgdir;

    public ManageUserAccountsJPanel(EcoSystem eco, JPanel jp, SystemAdmin sa) {
        initComponents();
        sysadminProcessStack = jp;
        ecosystem = eco;
        populateEnterpriseCombo();
        sysAdmin = sa;
        useraccountdirectory = ecosystem.getUserAccountDirectory();
        fmcgdir = ecosystem.getfMCGDirectory();
        refreshUserAccountTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        lblListofUsers = new javax.swing.JLabel();
        lblManageUser = new javax.swing.JLabel();
        btnDeleteUser = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        lblChooseType = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox<>();
        lblPersonName = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnCreatePerson = new javax.swing.JButton();
        lblPassword = new javax.swing.JLabel();
        lblEnterpriseName = new javax.swing.JLabel();
        txtPersonName = new javax.swing.JTextField();
        txtEnterpriseName = new javax.swing.JTextField();
        lblCreatePerson = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblEmailID = new javax.swing.JLabel();
        txtEmailID = new javax.swing.JTextField();
        chkBoxNotify = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUserAccounts = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(null);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(30, 10, 80, 23);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView);
        btnView.setBounds(380, 310, 110, 30);

        lblListofUsers.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblListofUsers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblListofUsers.setText("List of User Accounts");
        add(lblListofUsers);
        lblListofUsers.setBounds(30, 50, 900, 17);

        lblManageUser.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblManageUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManageUser.setText("Manage User Accounts");
        add(lblManageUser);
        lblManageUser.setBounds(150, 10, 710, 22);

        btnDeleteUser.setText("Delete User");
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });
        add(btnDeleteUser);
        btnDeleteUser.setBounds(810, 310, 120, 30);

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblChooseType.setText("Enterprise Type:");
        jLayeredPane1.add(lblChooseType);
        lblChooseType.setBounds(30, 40, 110, 30);

        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeActionPerformed(evt);
            }
        });
        jLayeredPane1.add(cmbType);
        cmbType.setBounds(150, 40, 140, 30);

        lblPersonName.setText("Person Name:");
        jLayeredPane1.add(lblPersonName);
        lblPersonName.setBounds(30, 90, 100, 30);
        jLayeredPane1.add(txtPassword);
        txtPassword.setBounds(700, 90, 140, 30);

        btnCreatePerson.setText("Create Person");
        btnCreatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePersonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(btnCreatePerson);
        btnCreatePerson.setBounds(350, 142, 140, 30);

        lblPassword.setText("Password:");
        jLayeredPane1.add(lblPassword);
        lblPassword.setBounds(630, 90, 60, 30);

        lblEnterpriseName.setText("Enterprise Name:");
        jLayeredPane1.add(lblEnterpriseName);
        lblEnterpriseName.setBounds(320, 40, 101, 30);
        jLayeredPane1.add(txtPersonName);
        txtPersonName.setBounds(150, 90, 140, 30);
        jLayeredPane1.add(txtEnterpriseName);
        txtEnterpriseName.setBounds(420, 40, 140, 30);

        lblCreatePerson.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCreatePerson.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreatePerson.setText("Create Person Profile and User Account");
        jLayeredPane1.add(lblCreatePerson);
        lblCreatePerson.setBounds(0, 0, 840, 30);

        lblUserName.setText("UserName:");
        jLayeredPane1.add(lblUserName);
        lblUserName.setBounds(350, 90, 70, 30);
        jLayeredPane1.add(txtUsername);
        txtUsername.setBounds(420, 90, 140, 30);

        lblEmailID.setText("Email ID:");
        jLayeredPane1.add(lblEmailID);
        lblEmailID.setBounds(620, 40, 60, 30);
        jLayeredPane1.add(txtEmailID);
        txtEmailID.setBounds(700, 40, 140, 30);

        chkBoxNotify.setText("Notify User Via Email");
        jLayeredPane1.add(chkBoxNotify);
        chkBoxNotify.setBounds(30, 140, 160, 21);

        add(jLayeredPane1);
        jLayeredPane1.setBounds(30, 350, 900, 180);

        tblUserAccounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Person Name", "Person ID", "Enterprise Name", "Enterprise Type", "Email ID", "Admin UserName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblUserAccounts);

        add(jScrollPane2);
        jScrollPane2.setBounds(30, 80, 900, 220);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        sysadminProcessStack.remove(this);
        ((java.awt.CardLayout) sysadminProcessStack.getLayout()).previous(sysadminProcessStack);

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        //if(selectedUserAccount==null) return;
        try {
            int selectedRow = tblUserAccounts.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row from table first!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                DefaultTableModel model = (DefaultTableModel) tblUserAccounts.getModel();
                UserAccount selectedperson = (UserAccount) model.getValueAt(selectedRow, 0);
                ViewUserDetails vud = new ViewUserDetails(selectedperson, sysadminProcessStack, ecosystem);
                sysadminProcessStack.add("View Account Details", vud);
                ((java.awt.CardLayout) sysadminProcessStack.getLayout()).next(sysadminProcessStack);
            }
        } catch (Exception e) {
            System.out.println("Exception in view button: " + e.getMessage());
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void cmbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeActionPerformed
        // TODO add your handling code here:
        updateEnterpriseNameVisibility();
    }//GEN-LAST:event_cmbTypeActionPerformed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = tblUserAccounts.getSelectedRow();
            if (selectedRow >= 0) {
                DefaultTableModel model = (DefaultTableModel) tblUserAccounts.getModel();
                UserAccount selectedperson = (UserAccount) model.getValueAt(selectedRow, 0);

                if (selectedperson.getAssociatedPersonProfile() instanceof SystemAdmin) {
                    JOptionPane.showMessageDialog(null, "Cannot Delete System Admin Account.", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                } else {
                    int dialogButton = JOptionPane.YES_NO_OPTION;
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete the Person details?", "Warning", dialogButton);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        useraccountdirectory.deletePerson(selectedperson);
                        deleteProfile(selectedperson);
                        refreshUserAccountTable();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a row from table first!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            System.out.println("Exception in Delete user: " + e.getMessage());
        }


    }//GEN-LAST:event_btnDeleteUserActionPerformed

    private void btnCreatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePersonActionPerformed
        // TODO add your handling code here:
        try {
            Person personNew = new Person(txtPersonName.getText(), txtEmailID.getText());
            switch (String.valueOf(cmbType.getSelectedItem())) {
                case "Farmer":
                    if (cmbType.getSelectedItem() != null && !txtPassword.getText().isBlank() && !txtPersonName.getText().isBlank() && !txtUsername.getText().isBlank()) {
                        Profile farmerProfile = sysAdmin.getEcoSystem().getFarmerDirectory().addNewFarmer(personNew);
                        UserAccount farmerAccount = useraccountdirectory.newUserAccount(farmerProfile, txtUsername.getText(), txtPassword.getText());
                        refreshUserAccountTable();
                        clearfields();
                        if (chkBoxNotify.isSelected() && farmerAccount != null) {
                            String emailText = "Welcome! Your Farmer account has been created.\nUsername: " + txtUsername.getText() + "\nPassword: " + txtPassword.getText() + "\nName: " + txtPersonName.getText();
                            EmailSender.sendEmail("anveri.a@northeastern.edu", "cropConnectOrganisation@gmail.com", "cropConnectOrganisation@gmail.com", "zyomzmraypococtp", "Account Created", emailText);
                            chkBoxNotify.setSelected(false);
                        }
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "Please fill all the details.", "Warning", JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                case "FMCG":
                    if (cmbType.getSelectedItem() != null && !txtEnterpriseName.getText().isBlank() && !txtPassword.getText().isBlank() && !txtPersonName.getText().isBlank() && !txtUsername.getText().isBlank()) {
                        FMCG fmcg = sysAdmin.newFmcg(txtEnterpriseName.getText(), personNew);
                        UserAccount fmcgAccount = useraccountdirectory.newUserAccount(fmcg.getFmcgAdmin(), txtUsername.getText(), txtPassword.getText());
                        refreshUserAccountTable();
                        clearfields();
                        if (chkBoxNotify.isSelected() && fmcgAccount != null) {
                            String emailText = "Welcome! Your FMCG account has been created.\nUsername: " + txtUsername.getText() + "\nPassword: " + txtPassword.getText() + "\nName: " + txtPersonName.getText();
                            EmailSender.sendEmail("anveri.a@northeastern.edu", "cropConnectOrganisation@gmail.com", "cropConnectOrganisation@gmail.com", "zyomzmraypococtp", "Account Created", emailText);
                            chkBoxNotify.setSelected(false);
                        }
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "Please fill all the details.", "Warning", JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                default:
                    if (cmbType.getSelectedItem() != null && !txtEnterpriseName.getText().isBlank() && !txtPassword.getText().isBlank() && !txtPersonName.getText().isBlank() && !txtUsername.getText().isBlank()) {
                        Distributor distributor = sysAdmin.newDistributor(txtEnterpriseName.getText(), personNew);
                        UserAccount distAccount = useraccountdirectory.newUserAccount(distributor.getDistributorAdmin(), txtUsername.getText(), txtPassword.getText());
                        refreshUserAccountTable();
                        clearfields();
                        if (chkBoxNotify.isSelected() && distAccount != null) {
                            String emailText = "Welcome! Your Distributor account has been created.\nUsername: " + txtUsername.getText() + "\nPassword: " + txtPassword.getText() + "\nName: " + txtPersonName.getText();
                            EmailSender.sendEmail("anveri.a@northeastern.edu", "cropConnectOrganisation@gmail.com", "cropConnectOrganisation@gmail.com", "zyomzmraypococtp", "Account Created", emailText);
                            chkBoxNotify.setSelected(false);
                        }
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "Please fill all the details.", "Warning", JOptionPane.WARNING_MESSAGE);
                        break;
                    }
            }
        } catch (Exception e) {
            System.out.println("Exception in Create user: " + e.getMessage());
        }
    }//GEN-LAST:event_btnCreatePersonActionPerformed

    public void refreshUserAccountTable() {
        try {
            int rc = tblUserAccounts.getRowCount();
            int i;
            for (i = rc - 1; i >= 0; i--) {
                ((DefaultTableModel) tblUserAccounts.getModel()).removeRow(i);
            }
            for (UserAccount userAccount : useraccountdirectory.getUserAccountList()) {
                if (!(userAccount.getAssociatedPersonProfile() instanceof ProcurementOfficer) && !(userAccount.getAssociatedPersonProfile() instanceof RequirementOfficer) && !(userAccount.getAssociatedPersonProfile() instanceof InventoryOfficer) && !(userAccount.getAssociatedPersonProfile() instanceof TransportOfficer)) {

                    Object[] row = new Object[6];
                    row[0] = userAccount;
                    row[1] = userAccount.getPersonId();
                    row[2] = getEnterpriseName(userAccount);
                    row[3] = userAccount.getRole();
                    row[4] = userAccount.getAssociatedPersonProfile().getPerson().getEmailId();
                    row[5] = userAccount.getUsername();
                    ((DefaultTableModel) tblUserAccounts.getModel()).addRow(row);
                }
            }
        } catch (Exception e) {
            System.out.println("Exception in Populating user account table: " + e.getMessage());
        }
    }

    private void populateEnterpriseCombo() {
        try {
            cmbType.removeAllItems();
            cmbType.addItem("Farmer");
            cmbType.addItem("FMCG");
            cmbType.addItem("Distributor");
            cmbType.setSelectedItem("Farmer");
            lblEnterpriseName.setVisible(false);
            txtEnterpriseName.setVisible(false);
        } catch (Exception e) {
            System.out.println("Exception in Populating enterprise combo: " + e.getMessage());
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePerson;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnView;
    private javax.swing.JCheckBox chkBoxNotify;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblChooseType;
    private javax.swing.JLabel lblCreatePerson;
    private javax.swing.JLabel lblEmailID;
    private javax.swing.JLabel lblEnterpriseName;
    private javax.swing.JLabel lblListofUsers;
    private javax.swing.JLabel lblManageUser;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPersonName;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTable tblUserAccounts;
    private javax.swing.JTextField txtEmailID;
    private javax.swing.JTextField txtEnterpriseName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPersonName;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private String getEnterpriseName(UserAccount ua) {
        try {
            if (ua.getAssociatedPersonProfile() instanceof FmcgAdmin) {
                for (FMCG fmcg : fmcgdir.getFmcgs()) {
                    if (fmcg.getFmcgAdmin().getPerson().getFullName().equals(ua.getPersonName())) {
                        return fmcg.getFmcgName();
                    }
                }
            } else if (ua.getAssociatedPersonProfile() instanceof FarmerProfile) {
                //for (FarmerProfile fp: ecosystem.getFarmerDirectory().getFarmerProfiles()){
                //if (fp.getPerson().getFullName().equals(selectedAccount.getPersonName())){
                return "Not Applicable";
                //}
                //}
            } else if (ua.getAssociatedPersonProfile() instanceof DistributorAdmin) {
                for (Distributor d : ecosystem.getDistributorDirectory().getDistributors()) {
                    if (d.getDistributorAdmin().getPerson().getFullName().equals(ua.getPersonName())) {
                        return d.getDistributorName();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Exception in get enterprise name: " + e.getMessage());
        }
        return "Not Applicable";
    }

    private void deleteProfile(UserAccount ua) {
        try {
            if (ua.getAssociatedPersonProfile() instanceof FmcgAdmin) {
                for (FMCG fmcg : fmcgdir.getFmcgs()) {
                    if (fmcg.getFmcgAdmin().getPerson().getFullName().equals(ua.getPersonName())) {
                        fmcgdir.deleteFMCG(fmcg);
                        return;
                    }
                }
            } else if (ua.getAssociatedPersonProfile() instanceof FarmerProfile) {
                for (FarmerProfile fp : ecosystem.getFarmerDirectory().getFarmerProfiles()) {
                    if (fp.getPerson().getFullName().equals(ua.getPersonName())) {
                        ecosystem.getFarmerDirectory().deleteFarmer(fp);
                        return;
                    }
                }
            } else if (ua.getAssociatedPersonProfile() instanceof DistributorAdmin) {
                for (Distributor d : ecosystem.getDistributorDirectory().getDistributors()) {
                    if (d.getDistributorAdmin().getPerson().getFullName().equals(ua.getPersonName())) {
                        ecosystem.getDistributorDirectory().deleteDistributor(d);
                        return;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Exception in delete profile: " + e.getMessage());
        }
    }

    private void updateEnterpriseNameVisibility() {
        try {
            if (!"Farmer".equals(String.valueOf(cmbType.getSelectedItem()))) {
                txtEnterpriseName.setVisible(true);
                lblEnterpriseName.setVisible(true);
            }
        } catch (Exception e) {
            System.out.println("Exception in Enterprise visibilty: " + e.getMessage());
        }
    }

    private void clearfields() {
        try {
            cmbType.setSelectedItem("Farmer");
            lblEnterpriseName.setVisible(false);
            txtEnterpriseName.setVisible(false);

            txtPersonName.setText("");
            txtEmailID.setText("");
            txtEnterpriseName.setText("");
            txtUsername.setText("");
            txtPassword.setText("");
        } catch (Exception e) {
            System.out.println("Exception in clear fields: " + e.getMessage());
        }
    }
}
